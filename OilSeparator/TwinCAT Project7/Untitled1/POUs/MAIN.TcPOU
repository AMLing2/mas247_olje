<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.12">
  <POU Name="MAIN" Id="{75317203-8f43-4932-aa88-c7b05e9ca563}" SpecialFunc="None">
    <Declaration><![CDATA[PROGRAM MAIN
VAR
	// ------ Linking variables to IO cards ------
		// --------- Outputs ---------
	Flow_Valve_1 	AT %Q* : INT;
	Level_Valve_1 	AT %Q* : INT;
	Level_Valve_2 	AT %Q* : INT;
	Level_Valve_3 	AT %Q* : INT;
	Gas_Valve 		AT %Q* : INT;		// Not used
	Mixer_Valve 	AT %Q* : INT;		// Not used
	Motor_speed 	AT %Q* : INT;	
	Motor_Direction AT %Q* : BOOL; 		// Don't touch
		// --------- Inputs ---------
			// Buttons
	Toggle_Button 	AT %I* :BOOL;	// Normally Open  (OFF), Green
	Reset_Button 	AT %I* : BOOL; 	// Normally Closed (ON), Red
	EMERGENCY_STOP 	AT %I* : BOOL; 	// Normally Closed (ON), Emergency Switch
			// Sensors
	Level_Transmitter_1 	AT %I* :INT;
	Level_Transmitter_2 	AT %I* :INT;
	Temperature_Transmitter AT %I* :INT;
	Pressure_Differencial_Transmitter_1 AT %I* : INT;
	Pressure_Differencial_Transmitter_2 AT %I* : INT;	// Not used
	Pressure_Transmitter_1 AT %I* : INT ;
	Pressure_Transmitter_2 AT %I* : INT ;
	Pressure_Transmitter_3 AT %I* : INT ; 				// Not used
	// ------ Linking variables to IO cards ------
	
	// ------- Display Input Variables ---------
		// Percentages
	LT1percent  : INT;		// Currently used for displaying bits.
	LT2percent  : INT;		// Sadly didn't have time to remap,
	TT1percent  : INT;		// as we need to share the PLC.
	PDT1percent : INT;
	PDT2percent : INT;
	PT1percent  : INT;
	PT2percent  : INT;
	PT3percent  : INT;
		// Actual values
	LT1mm 	: REAL;
	LT2mm 	: REAL;
	TT1c 	: REAL;
	PDT1bar : REAL;
	PDT2bar : REAL;		// Not used
	PT1bar  : REAL;
	PT2bar  : REAL;
	PT3bar  : REAL;		// Not used
		// Scaling variables
	bitMax 		: REAL := 32767;			// [bits]
	minPT 		: REAL := 0.06;				// [bar]
	maxPT 		: REAL := 6;				// [bar]
	deltaPT 	: REAL := maxPT - minPT;	// [bar]
	minPDT		: REAL := 0.004;			// [bar]
	maxPDT		: REAL := 0.4;				// [bar]
	deltaPDT	: REAL := maxPDT - minPDT;	// [bar]
	C			: REAL := 1.0/(20.03);		// See calculation. "Scale descaler"
	
	//maxLT 		: REAL := 304.8;			// [mm]
	minLT1  	: REAL := 37.0;				// [mm]
	minLT1bit  	: REAL := 270.0;			// [mm]
	minLT2  	: REAL := 43.4;				// [mm]
	kLT1		: REAL := 9.0/1694.0;		// [deltaMMmeasured/deltaBitmeasured]
	kLT2		: REAL := 9.0/1529.0;		// [deltaMMmeasured/deltaBitmeasured
	
	maxTT		: REAL := 250;				// [celsius]
	minTT		: REAL := -50;				// [celsius]
	deltaTT 	: REAL := maxTT - minTT;	// [celsius]
	
	rhoWater 	: REAL := 998.0;			// Water Density [kg/m^3]
	rhoOil		: REAL := 857.0;			// Oil Density   [kg/m^3]
	
	h_oil 		: REAL;
	h_water 	: REAL;
	g			: REAL := 9.80665;			// Gravity (earth, not mars!) [m/s^2]
	
		// Linear Regression of PDT1
	k 			: REAL := 0.06172;
	coeff		: REAL := 69.67;
	
		// With Float on both fluids
	A 			: REAL := 1.0/(rhoWater*g - rhoOil*g);
	B 			: REAL := rhoOil/(rhoWater - rhoOil);
	
	// ------- Display Input Variables --------- 
	
	
		// Toggle Motor Statee with green button
	risingEdge : R_TRIG;
	elapsedDebounce : TIME;
	toggleMotor : BOOL;
	
	// ------------------ HMI ------------------
	Motor_ON : BOOL; 				// For HMI button
	ON_OFF 	 : STRING(10) := 'OFF'; // For HMI text
	// ------------------ HMI ------------------
	
	// Emergency System
	alarmSystem : FB_EmergencySystem;
	
	// Initializer
	init : BOOL := FALSE;
	mainInitializer : FB_defaultValues;
END_VAR

VAR_INPUT
	bClear     : BOOL;
	bEmergency : BOOL;
	Motor_ON_OFF 	AT %Q* : BOOL := FALSE;	// Motor switch	
	StartProcess : BOOL; //POU Variable for detecting machine state
	StartBuffer  : BOOL := FALSE;
	
	// User Input as percentage, Declaration
	Flow_Valve_1_Percentage	: INT;
	Level_Valve_1_Percentage: INT;
	Level_Valve_2_Percentage: INT;
	Level_Valve_3_Percentage: INT;
	Motor_speed_Percentage	: INT;
END_VAR]]></Declaration>
    <Implementation>
      <ST><![CDATA[
// ======================== Initializer ========================
	IF NOT init THEN
	// ------------ Main values ------------
		mainInitializer(MotorState  := Motor_ON_OFF,
						MotorSpeed  := Motor_speed_Percentage,
						FV1_Percent := Flow_Valve_1_Percentage,
						LV1_Percent := Level_Valve_1_Percentage,
						LV2_Percent := Level_Valve_2_Percentage,
						LV3_Percent := Level_Valve_3_Percentage);
		
		init := TRUE;
	END_IF
// ======================== Initializer ========================

// ======================== Alarm System ========================
	alarmSystem(ClearButton 		:= Reset_Button,
				EmergencyButton 	:= EMERGENCY_STOP,
				HMIClearButton 		:= bClear,
				HMIEmergencyButton 	:= bEmergency);
// ======================== Alarm System ========================
	
// ================ Outer bounds logic (outputs) ================
IF Flow_Valve_1_Percentage > 100 THEN
	Flow_Valve_1_Percentage := 100; 
	ELSE IF Flow_Valve_1_Percentage < 0 THEN 
		Flow_Valve_1_Percentage := 0; 
	END_IF
END_IF

IF Level_Valve_1_Percentage > 100 THEN
	Level_Valve_1_Percentage := 100; 
	ELSE IF Level_Valve_1_Percentage < 0 THEN 
		Level_Valve_1_Percentage := 0; 
	END_IF
END_IF

IF Level_Valve_2_Percentage > 100 THEN
	Level_Valve_2_Percentage := 100; 
	ELSE IF Level_Valve_2_Percentage < 0 THEN 
		Level_Valve_2_Percentage := 0; 
	END_IF
END_IF

IF Level_Valve_3_Percentage > 100 THEN
	Level_Valve_3_Percentage := 100; 
	ELSE IF Level_Valve_3_Percentage < 0 THEN 
		Level_Valve_3_Percentage := 0; 
	END_IF
END_IF

IF Motor_speed_Percentage > 100 THEN
	Motor_speed_Percentage := 100; 
	ELSE IF Motor_speed_Percentage < 0 THEN 
		Motor_speed_Percentage := 0; 
	END_IF
END_IF
// ================= Outer bounds logic (outputs) ================

// ================= Percentage Mapping (OUTPUTS) =================
	// Take 2 [V] to 10 [V]
// Flow_Valve_1 calibration
Flow_Valve_1 := REAL_TO_INT (262.14*Flow_Valve_1_Percentage +6553 ); 
// Level_Valve_1 calibration
Level_Valve_1 := REAL_TO_INT(262.14*Level_Valve_1_Percentage +6553);
// Level_Valve_2 calibration
Level_Valve_2 := REAL_TO_INT(262.14*Level_Valve_2_Percentage +6553);
// Level_Valve_3 calibration
Level_Valve_3 := REAL_TO_INT(262.14*Level_Valve_3_Percentage +6553);

// Motor_speed calibration
Motor_speed := REAL_TO_INT(262.14*Motor_speed_Percentage +6553);
// ================= Percentage Mapping (OUTPUTS) =================

// ================= Mapping (INPUTS) =================
		// Take 4 [mA] to 20 [mA] 
	// Bits. As mentioned above, they're not renamed due to short time
	LT1percent  := Level_Transmitter_1;
	LT2percent  := Level_Transmitter_2;
	TT1percent  := Temperature_Transmitter;
	PDT1percent := Pressure_Differencial_Transmitter_1;
	PDT2percent := REAL_TO_INT(Pressure_Differencial_Transmitter_2 * (rhoOil/rhoWater) * (100/bitMax));	
	PT1percent  := Pressure_Transmitter_1;		// ^Not used^
	PT2percent  := Pressure_Transmitter_2;
	PT3percent  := Pressure_Transmitter_3;		// Not used
	
		// Actual values
	LT1mm 	:= Level_Transmitter_1					* kLT1 						+ minLT1; // Different Mapping
	LT2mm 	:= Level_Transmitter_2 					* kLT2						+ minLT2; // Different Mapping
	TT1c 	:= Temperature_Transmitter 				* (deltaTT/bitMax)  		+ minTT;
	PDT1bar := Pressure_Differencial_Transmitter_1 	* k + coeff;
	PDT2bar := Pressure_Differencial_Transmitter_2 	* (deltaPDT/bitMax);	// Not used
	PT1bar  := Pressure_Transmitter_1 				* (deltaPT/bitMax);
	PT2bar  := Pressure_Transmitter_2 				* (deltaPT/bitMax);
	PT3bar  := Pressure_Transmitter_3 				* (deltaPT/bitMax);		// Not used
	
		// Height estimate, with float on both fluids
	h_water := ( (PDT1bar * (100000.0) * A)  - (LT2mm * (1.0/1000.0) * B))*1000.0;
	h_oil	:= LT2mm - h_water;
// ================= Mapping (INPUTS) =================

	// Toggle motor state with green button
risingEdge(CLK := Toggle_Button,
		   Q => toggleMotor);
IF toggleMotor THEN
	Motor_ON_OFF := NOT Motor_ON_OFF;
END_IF

// ======================== HMI Display ========================
 // Start motor?
IF Motor_ON_OFF   THEN
    Motor_ON   :=  FALSE;		// Button display
	ON_OFF  := 'MOTOR: ON' ;	// Text display
	
ELSE
    Motor_ON  := TRUE;			// Button display
	ON_OFF  := 'MOTOR: OFF' ;	// Text display
END_IF
// ======================== HMI Display ========================
]]></ST>
    </Implementation>
    <LineIds Name="MAIN">
      <LineId Id="1431" Count="1" />
      <LineId Id="1434" Count="0" />
      <LineId Id="2184" Count="0" />
      <LineId Id="1565" Count="4" />
      <LineId Id="1435" Count="0" />
      <LineId Id="2301" Count="0" />
      <LineId Id="2186" Count="0" />
      <LineId Id="1436" Count="0" />
      <LineId Id="1433" Count="0" />
      <LineId Id="2306" Count="0" />
      <LineId Id="1179" Count="0" />
      <LineId Id="1272" Count="0" />
      <LineId Id="1426" Count="0" />
      <LineId Id="3009" Count="1" />
      <LineId Id="1374" Count="0" />
      <LineId Id="1199" Count="0" />
      <LineId Id="1178" Count="0" />
      <LineId Id="170" Count="4" />
      <LineId Id="44" Count="0" />
      <LineId Id="1503" Count="0" />
      <LineId Id="104" Count="4" />
      <LineId Id="101" Count="0" />
      <LineId Id="1502" Count="0" />
      <LineId Id="114" Count="4" />
      <LineId Id="112" Count="0" />
      <LineId Id="1501" Count="0" />
      <LineId Id="121" Count="4" />
      <LineId Id="111" Count="0" />
      <LineId Id="47" Count="0" />
      <LineId Id="142" Count="4" />
      <LineId Id="40" Count="0" />
      <LineId Id="161" Count="0" />
      <LineId Id="1699" Count="0" />
      <LineId Id="1489" Count="0" />
      <LineId Id="1903" Count="0" />
      <LineId Id="1490" Count="10" />
      <LineId Id="1203" Count="0" />
      <LineId Id="1700" Count="1" />
      <LineId Id="1904" Count="0" />
      <LineId Id="1800" Count="0" />
      <LineId Id="1717" Count="3" />
      <LineId Id="1722" Count="0" />
      <LineId Id="3128" Count="0" />
      <LineId Id="1723" Count="0" />
      <LineId Id="1703" Count="0" />
      <LineId Id="3127" Count="0" />
      <LineId Id="1801" Count="0" />
      <LineId Id="1803" Count="6" />
      <LineId Id="1802" Count="0" />
      <LineId Id="2645" Count="0" />
      <LineId Id="2776" Count="0" />
      <LineId Id="2518" Count="0" />
      <LineId Id="2893" Count="0" />
      <LineId Id="1702" Count="0" />
      <LineId Id="1626" Count="0" />
      <LineId Id="1621" Count="0" />
      <LineId Id="1615" Count="0" />
      <LineId Id="1638" Count="0" />
      <LineId Id="1642" Count="2" />
      <LineId Id="1427" Count="0" />
      <LineId Id="201" Count="3" />
      <LineId Id="213" Count="0" />
      <LineId Id="212" Count="0" />
      <LineId Id="205" Count="1" />
      <LineId Id="214" Count="0" />
      <LineId Id="76" Count="0" />
      <LineId Id="1270" Count="0" />
      <LineId Id="269" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>